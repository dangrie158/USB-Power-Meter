   1               		.file	"num2str.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata
  11               	.LC0:
  12 0000 1027      		.word	10000
  13 0002 E803      		.word	1000
  14 0004 6400      		.word	100
  15 0006 0A00      		.word	10
  16 0008 0100      		.word	1
  17               		.text
  18               	.global	usint2decascii
  20               	usint2decascii:
  21               	.LFB0:
  22               		.file 1 "lib/ssd1306xled/num2str.c"
   1:lib/ssd1306xled/num2str.c **** /*
   2:lib/ssd1306xled/num2str.c ****  * NUM2STR - Functions to handle the conversion of numeric vales to strings.
   3:lib/ssd1306xled/num2str.c ****  *
   4:lib/ssd1306xled/num2str.c ****  * @created	2014-12-18
   5:lib/ssd1306xled/num2str.c ****  * @author	Neven Boyanov
   6:lib/ssd1306xled/num2str.c ****  * @version	Last Modified 2015-01-17
   7:lib/ssd1306xled/num2str.c ****  *
   8:lib/ssd1306xled/num2str.c ****  * This is part of the TinyAVRLib project.
   9:lib/ssd1306xled/num2str.c ****  *
  10:lib/ssd1306xled/num2str.c ****  * Copyright (c) 2015 Neven Boyanov, Tinusaur Team. All Rights Reserved.
  11:lib/ssd1306xled/num2str.c ****  * Distributed as open source software under MIT License, see LICENSE.txt file.
  12:lib/ssd1306xled/num2str.c ****  * Please, as a favour, retain the link http://tinusaur.org to The Tinusaur Project.
  13:lib/ssd1306xled/num2str.c ****  *
  14:lib/ssd1306xled/num2str.c ****  * Source code available at: https://bitbucket.org/tinusaur/tinyavrlib
  15:lib/ssd1306xled/num2str.c ****  *
  16:lib/ssd1306xled/num2str.c ****  */
  17:lib/ssd1306xled/num2str.c **** 
  18:lib/ssd1306xled/num2str.c **** // ----------------------------------------------------------------------------
  19:lib/ssd1306xled/num2str.c **** 
  20:lib/ssd1306xled/num2str.c **** #include "num2str.h"
  21:lib/ssd1306xled/num2str.c **** 
  22:lib/ssd1306xled/num2str.c **** // ----------------------------------------------------------------------------
  23:lib/ssd1306xled/num2str.c **** 
  24:lib/ssd1306xled/num2str.c **** // NOTE: This implementation is borrowed from the LCDDDD library.
  25:lib/ssd1306xled/num2str.c **** // Original source code at: https://bitbucket.org/boyanov/avr/src/default/lcdddd/src/lcdddd/lcdddd.
  26:lib/ssd1306xled/num2str.c **** 
  27:lib/ssd1306xled/num2str.c **** uint8_t usint2decascii(uint16_t num, char* buffer)
  28:lib/ssd1306xled/num2str.c **** {
  23               		.loc 1 28 0
  24               		.cfi_startproc
  25               	.LVL0:
  26 0000 CF93      		push r28
  27               	.LCFI0:
  28               		.cfi_def_cfa_offset 3
  29               		.cfi_offset 28, -2
  30 0002 DF93      		push r29
  31               	.LCFI1:
  32               		.cfi_def_cfa_offset 4
  33               		.cfi_offset 29, -3
  34 0004 CDB7      		in r28,__SP_L__
  35 0006 DEB7      		in r29,__SP_H__
  36               	.LCFI2:
  37               		.cfi_def_cfa_register 28
  38 0008 2A97      		sbiw r28,10
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 14
  41 000a 0FB6      		in __tmp_reg__,__SREG__
  42 000c F894      		cli
  43 000e DEBF      		out __SP_H__,r29
  44 0010 0FBE      		out __SREG__,__tmp_reg__
  45 0012 CDBF      		out __SP_L__,r28
  46               	/* prologue: function */
  47               	/* frame size = 10 */
  48               	/* stack size = 12 */
  49               	.L__stack_usage = 12
  50 0014 AC01      		movw r20,r24
  29:lib/ssd1306xled/num2str.c **** 	const unsigned short powers[] = { 10000u, 1000u, 100u, 10u, 1u }; // The "const unsigned short" co
  51               		.loc 1 29 0
  52 0016 8AE0      		ldi r24,lo8(10)
  53               	.LVL1:
  54 0018 E0E0      		ldi r30,lo8(.LC0)
  55 001a F0E0      		ldi r31,hi8(.LC0)
  56 001c DE01      		movw r26,r28
  57 001e 1196      		adiw r26,1
  58               		0:
  59 0020 0190      		ld r0,Z+
  60 0022 0D92      		st X+,r0
  61 0024 8A95      		dec r24
  62 0026 01F4      		brne 0b
  63               	.LVL2:
  64 0028 FE01      		movw r30,r28
  65 002a 3196      		adiw r30,1
  66 002c DB01      		movw r26,r22
  67               	.LBB2:
  30:lib/ssd1306xled/num2str.c **** 	char digit; // "digit" is stored in a char array, so it should be of type char.
  31:lib/ssd1306xled/num2str.c **** 	uint8_t digits = USINT2DECASCII_MAX_DIGITS - 1;
  32:lib/ssd1306xled/num2str.c **** 	for (uint8_t pos = 0; pos < 5; pos++) // "pos" is index in array, so should be of type int.
  68               		.loc 1 32 0
  69 002e 20E0      		ldi r18,0
  70               	.LBE2:
  31:lib/ssd1306xled/num2str.c **** 	for (uint8_t pos = 0; pos < 5; pos++) // "pos" is index in array, so should be of type int.
  71               		.loc 1 31 0
  72 0030 84E0      		ldi r24,lo8(4)
  73               	.LVL3:
  74               	.L2:
  75               	.LBB3:
  33:lib/ssd1306xled/num2str.c **** 	{
  34:lib/ssd1306xled/num2str.c **** 		digit = 0;
  35:lib/ssd1306xled/num2str.c **** 		while (num >= powers[pos])
  76               		.loc 1 35 0
  77 0032 6191      		ld r22,Z+
  78 0034 7191      		ld r23,Z+
  79 0036 90E0      		ldi r25,0
  80               	.L6:
  81               	.LVL4:
  82 0038 4617      		cp r20,r22
  83 003a 5707      		cpc r21,r23
  84 003c 00F0      		brlo .L10
  36:lib/ssd1306xled/num2str.c **** 		{
  37:lib/ssd1306xled/num2str.c **** 			digit++;
  85               		.loc 1 37 0
  86 003e 9F5F      		subi r25,lo8(-(1))
  87               	.LVL5:
  38:lib/ssd1306xled/num2str.c **** 			num -= powers[pos];
  88               		.loc 1 38 0
  89 0040 461B      		sub r20,r22
  90 0042 570B      		sbc r21,r23
  91               	.LVL6:
  92 0044 00C0      		rjmp .L6
  93               	.L10:
  39:lib/ssd1306xled/num2str.c **** 		}
  40:lib/ssd1306xled/num2str.c **** 
  41:lib/ssd1306xled/num2str.c **** 		// ---- CHOOSE (1), (2) or (3) ----
  42:lib/ssd1306xled/num2str.c **** 
  43:lib/ssd1306xled/num2str.c **** 		// CHOICE (1) Fixed width, zero padded result.
  44:lib/ssd1306xled/num2str.c **** 		/*
  45:lib/ssd1306xled/num2str.c **** 		buffer[pos] = digit + '0';	// Convert to ASCII
  46:lib/ssd1306xled/num2str.c **** 		*/
  47:lib/ssd1306xled/num2str.c **** 
  48:lib/ssd1306xled/num2str.c **** 		// CHOICE (2) Fixed width, zero padded result, digits offset.
  49:lib/ssd1306xled/num2str.c **** 		/*
  50:lib/ssd1306xled/num2str.c **** 		buffer[pos] = digit + '0';	// Convert to ASCII
  51:lib/ssd1306xled/num2str.c **** 		// Note: Determines the offset of the first significant digit.
  52:lib/ssd1306xled/num2str.c **** 		if (digits == -1 && digit != 0) digits = pos;
  53:lib/ssd1306xled/num2str.c **** 		// Note: Could be used for variable width, not padded, left aligned result.
  54:lib/ssd1306xled/num2str.c **** 		*/
  55:lib/ssd1306xled/num2str.c **** 
  56:lib/ssd1306xled/num2str.c **** 		// CHOICE (3) Fixed width, space (or anything else) padded result, digits offset.
  57:lib/ssd1306xled/num2str.c **** 		// Note: Determines the offset of the first significant digit.
  58:lib/ssd1306xled/num2str.c **** 		// Note: Could be used for variable width, not padded, left aligned result.
  59:lib/ssd1306xled/num2str.c **** 		if (digits == USINT2DECASCII_MAX_DIGITS - 1)
  94               		.loc 1 59 0
  95 0046 8430      		cpi r24,lo8(4)
  96 0048 01F4      		brne .L4
  60:lib/ssd1306xled/num2str.c **** 		{
  61:lib/ssd1306xled/num2str.c **** 			if (digit == 0)
  97               		.loc 1 61 0
  98 004a 9111      		cpse r25,__zero_reg__
  99 004c 00C0      		rjmp .L8
  62:lib/ssd1306xled/num2str.c **** 			{
  63:lib/ssd1306xled/num2str.c **** 				if (pos < USINT2DECASCII_MAX_DIGITS - 1)	// Check position, so single "0" will be handled prope
 100               		.loc 1 63 0
 101 004e 2430      		cpi r18,lo8(4)
 102 0050 01F0      		breq .L8
  64:lib/ssd1306xled/num2str.c **** 					digit = -16;	// Use: "-16" for space (' '), "-3" for dash/minus ('-'), "0" for zero ('0'), etc
 103               		.loc 1 64 0
 104 0052 90EF      		ldi r25,lo8(-16)
 105               	.LVL7:
 106 0054 00C0      		rjmp .L4
 107               	.LVL8:
 108               	.L8:
 109 0056 822F      		mov r24,r18
 110               	.LVL9:
 111               	.L4:
  65:lib/ssd1306xled/num2str.c **** 			}
  66:lib/ssd1306xled/num2str.c **** 			else
  67:lib/ssd1306xled/num2str.c **** 			{
  68:lib/ssd1306xled/num2str.c **** 				digits = pos;
  69:lib/ssd1306xled/num2str.c **** 			}
  70:lib/ssd1306xled/num2str.c **** 		}
  71:lib/ssd1306xled/num2str.c **** 		buffer[pos] = digit + '0';	// Convert to ASCII
 112               		.loc 1 71 0 discriminator 2
 113 0058 905D      		subi r25,lo8(-(48))
 114 005a 9D93      		st X+,r25
  32:lib/ssd1306xled/num2str.c **** 	{
 115               		.loc 1 32 0 discriminator 2
 116 005c 2F5F      		subi r18,lo8(-(1))
 117               	.LVL10:
 118 005e 2530      		cpi r18,lo8(5)
 119 0060 01F4      		brne .L2
 120               	.LVL11:
 121               	/* epilogue start */
 122               	.LBE3:
  72:lib/ssd1306xled/num2str.c **** 		
  73:lib/ssd1306xled/num2str.c **** 	}
  74:lib/ssd1306xled/num2str.c **** 	
  75:lib/ssd1306xled/num2str.c **** 	// NOTE: The resulting ascii text should not be terminated with '\0' here.
  76:lib/ssd1306xled/num2str.c **** 	//       The provided buffer maybe part of a larger text in both directions.
  77:lib/ssd1306xled/num2str.c **** 	
  78:lib/ssd1306xled/num2str.c **** 	return digits;
  79:lib/ssd1306xled/num2str.c **** }
 123               		.loc 1 79 0
 124 0062 2A96      		adiw r28,10
 125 0064 0FB6      		in __tmp_reg__,__SREG__
 126 0066 F894      		cli
 127 0068 DEBF      		out __SP_H__,r29
 128 006a 0FBE      		out __SREG__,__tmp_reg__
 129 006c CDBF      		out __SP_L__,r28
 130 006e DF91      		pop r29
 131 0070 CF91      		pop r28
 132 0072 0895      		ret
 133               		.cfi_endproc
 134               	.LFE0:
 136               	.Letext0:
 137               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 num2str.c
/var/folders/ct/_b0xx7k52l9dgpb8n2_js71w0000gn/T//ccFK5Bvu.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/ct/_b0xx7k52l9dgpb8n2_js71w0000gn/T//ccFK5Bvu.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/ct/_b0xx7k52l9dgpb8n2_js71w0000gn/T//ccFK5Bvu.s:4      *ABS*:000000000000003f __SREG__
/var/folders/ct/_b0xx7k52l9dgpb8n2_js71w0000gn/T//ccFK5Bvu.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/ct/_b0xx7k52l9dgpb8n2_js71w0000gn/T//ccFK5Bvu.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/ct/_b0xx7k52l9dgpb8n2_js71w0000gn/T//ccFK5Bvu.s:20     .text:0000000000000000 usint2decascii

UNDEFINED SYMBOLS
__do_copy_data
